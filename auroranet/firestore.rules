rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user role from users collection
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    // Helper function to check if user is guest
    function isGuest() {
      return isAuthenticated() && getUserRole() == 'guest';
    }

    // Users collection rules
    match /users/{userId} {
      // Anyone authenticated can read their own user document
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Only the system can create user documents (via backend or during registration)
      // Users can be created during registration
      allow create: if isAuthenticated() && request.auth.uid == userId
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email;

      // Users cannot update their own role, but can update other fields
      allow update: if isAuthenticated() && request.auth.uid == userId
                    && request.resource.data.role == resource.data.role;

      // Only admins can delete user documents
      allow delete: if isAdmin();
    }

    // Events collection rules
    match /events/{eventId} {
      // Everyone authenticated can read events
      allow read: if isAuthenticated();

      // Only admins can create, update, or delete events
      allow create, update, delete: if isAdmin();
    }

    // Reservations collection rules
    match /reservations/{reservationId} {
      // Users can read their own reservations
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.userId || isAdmin());

      // Users can create reservations for themselves
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Users can update/delete their own reservations
      // Admins can update/delete any reservation
      allow update, delete: if isAuthenticated() &&
                               (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
}
